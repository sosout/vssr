#!/usr/bin/env node
const parseArgs = require('minimist')
const consola = require('consola')
const { version } = require('../package.json')
const { Vssr, Builder } = require('..')
const { loadVssrConfig, getLatestHost } = require('./common/utils')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    H: 'hostname',
    p: 'port',
    c: 'config-file',
    s: 'spa',
    u: 'universal',
    v: 'version'
  },
  boolean: ['h', 's', 'u', 'v'],
  string: ['H', 'c'],
  default: {
    c: 'vssr.config.js'
  }
})

if (argv.version) {
  process.stderr.write(version + '\n')
  process.exit(0)
}

if (argv.hostname === '' || argv.hostname === "''") {
  consola.fatal('Provided hostname argument has no value')
}

if (argv.help) {
  process.stderr.write(`
    Description
      Starts the application in development mode (hot-code reloading, error
      reporting, etc)
    Usage
      $ vssr dev <dir> -p <port number> -H <hostname>
    Options
      --port, -p          A port number on which to start the application
      --hostname, -H      Hostname on which to start the application
      --spa               Launch in SPA mode
      --universal         Launch in Universal mode (default)
      --config-file, -c   Path to Vssr.js config file (default: vssr.config.js)
      --help, -h          Displays this message
  `)
  process.exit(0)
}

// 合并命令行配置，获取最新配置
const config = () => {
  // 强制开发模式，用于添加热重新加载和观察更改
  return Object.assign(loadVssrConfig(argv), { dev: true })
}

const errorHandler = (err, instance) => {
  instance && instance.builder.watchServer()
  consola.error(err)
}

// Start dev
(function startDev(oldInstance) {
  let vssr, builder

  try {
    vssr = new Vssr(config())
    builder = new Builder(vssr)
    vssr.hook('watch:fileChanged', (builder, fname) => {
      consola.debug(`[${fname}] changed, Rebuilding the app...`)
      startDev({ vssr: builder.vssr, builder })
    })
  } catch (err) {
    return errorHandler(err, oldInstance)
  }

  // Get latest environment variables
  const { port, host, socket } = getLatestHost(argv)

  return (
    Promise.resolve()
      .then(() => oldInstance && oldInstance.vssr.clearHook('watch:fileChanged'))
      .then(() => oldInstance && oldInstance.builder.unwatch())
      // Start build
      .then(() => builder.build())
      // Close old vssr no mater if build successfully
      .catch((err) => {
        oldInstance && oldInstance.vssr.close()
        // Jump to eventHandler
        throw err
      })
      .then(() => oldInstance && oldInstance.vssr.close())
      // Start listening
      .then(() => vssr.listen(port, host, socket))
      // Show ready message first time, others will be shown through WebpackBar
      .then(() => !oldInstance && vssr.showReady(false))
      .then(() => builder.watchServer())
      // Handle errors
      .catch(err => errorHandler(err, { builder, vssr }))
  )
})()
